#BlueJ class context
comment0.target=AnimalArrayListTest
comment0.text=\n\ Test\ Class\ for\ {@link\ AnimalArrayList}.\n\ \n\ Ensures\ that\ all\ functionality\ is\ working\ properly\ for\ {@link\ AnimalArrayList}\ objects.\n\ \n\ @author\ Jackson\ Eshbaugh\n\ @version\ 02/10/2024\n
comment1.params=
comment1.target=AnimalArrayListTest()
comment1.text=\n\ Creates\ a\ new\ {@code\ AnimalArrayListTest}\ object.\n
comment10.params=
comment10.target=void\ testSize()
comment10.text=\n\ Tests\ the\ {@link\ AnimalArrayList\#size()}\ method\:\n\ <ol>\n\ \ <li>Verifies\ the\ size\ of\ a\ new\ list\ is\ {@code\ 0}.</li>\n\ \ <li>Checks\ the\ list\ size\ after\ adding\ items.</li>\n\ \ <li>Checks\ the\ list\ size\ after\ removing\ items.</li>\n\ </ol>\n
comment11.params=
comment11.target=void\ testClear()
comment11.text=\n\ Tests\ the\ {@link\ AnimalArrayList\#clear()}\ method\:\n\ <ol>\n\ \ <li>Tests\ an\ empty\ list.</li>\n\ \ <li>Tests\ a\ list\ with\ items\ (should\ have\ a\ {@code\ size}\n\ \ \ \ \ \ of\ 0\ and\ accessing\ any\ item\ shouldn't\ work\ after\n\ \ \ \ \ \ clearing\ it)</li>\n\ </ol>\n
comment12.params=
comment12.target=void\ testGet()
comment12.text=\n\ Tests\ the\ {@link\ AnimalArrayList\#get(int)}\ method\:\n\ <ol>\n\ \ \ <li>Tests\ an\ {@code\ index}\ too\ large\ for\ the\ list's\ boundaries.</li>\n\ \ \ <li>Tests\ an\ {@code\ index}\ too\ small\ for\ the\ list's\ boundaries.</li>\n\ \ \ <li>Tests\ an\ {@code\ index}\ within\ the\ list's\ boundaries.</li>\n\ \ \ <li>Tests\ an\ {@code\ index}\ at\ the\ beginning\ the\ list's\ boundary\ (i.e.,\ {@code\ 0}).</li>\n\ \ \ <li>Tests\ an\ {@code\ index}\ at\ the\ end\ of\ the\ list's\ boundary\ (i.e.,\ {@link\ AnimalArrayList\#size()}\ {@code\ -\ 1}).</li>\n\ </ol>\n
comment13.params=
comment13.target=void\ testResize()
comment13.text=\n\ Tests\ the\ {@link\ AnimalArrayList\#resize(int)}\ method\:\n\ <ol>\n\ \ <li>Grows\ an\ array\ by\ adding\ values\ and\ ensures\n\ \ \ \ \ \ that\ each\ value\ can\ still\ be\ added.</li>\n\ \ <li>Removes\ these\ values\ and\ ensures\ that\ each\ is\ removed.</li>\n\ </ol>\n
comment2.params=
comment2.target=void\ setUp()
comment2.text=\n\ Called\ before\ each\ test\ is\ called.\n
comment3.params=
comment3.target=void\ tearDown()
comment3.text=\n\ Called\ after\ each\ test\ is\ called.\n
comment4.params=
comment4.target=void\ testDefaultConstructor()
comment4.text=\n\ Tests\ the\ {@link\ AnimalArrayList\#AnimalArrayList()}\ constructor\:\n\ Enusres\ a\ newly\ created\ list\ has\ a\ {@code\ size}\ of\ {@code\ 0}.\n
comment5.params=
comment5.target=void\ testConstructorInt()
comment5.text=\n\ Tests\ the\ {@link\ AnimalArrayList\#AnimalArrayList(int)}\ constructor\:\n\ Creates\ random\ int\ values,\ then\ initiates\ animal\ array\ lists\ to\ their\ sizes.\n\ Finally,\ ensures\ that\ the\ {@code\ size}\ value\ does\ not\ change\ based\ on\ this.\n
comment6.params=
comment6.target=void\ testAdd()
comment6.text=\n\ Tests\ the\ {@link\ AnimalArrayList\#add(Animal)}\ method\:\n\ <ol>\n\ \ <li>Adds\ a\ {@code\ Fish}\ to\ the\ list.</li>\n\ \ <li>Adds\ some\ {@code\ Bear}s\ to\ the\ list.</li>\n\ \ <li>Tries\ to\ add\ {@code\ null}\ to\ the\ list.</li>\n\ </ol>\n
comment7.params=
comment7.target=void\ testRemoveAnimal()
comment7.text=\n\ Tests\ the\ {@link\ AnimalArrayList\#remove(Animal)}\ method.\n\ From\ a\ prepared\ (pre-filled)\ list\:\n\ <ol>\n\ \ <li>Tries\ to\ remove\ an\ {@code\ Animal}\ that\ is\ in\ the\ list.</li>\n\ \ <li>Tries\ to\ remove\ an\ {@code\ Animal}\ that\ isn't\ in\ the\ list.</li>\n\ \ <li>Tries\ to\ remove\ {@code\ null}\ from\ the\ list.</li>\n\ </ol>\n
comment8.params=
comment8.target=void\ testRemoveIndex()
comment8.text=\n\ Tests\ the\ {@link\ AnimalArrayList\#remove(int)}\ method.\n\ From\ a\ prepared\ (pre-filled)\ list\:\n\ <ol>\n\ \ <li>Tries\ to\ remove\ a\ valid\ index\ from\ the\ list.</li>\n\ \ <li>Tries\ to\ remove\ an\ invalid\ index\ from\ the\ list.</li>\n\ \ <li>Tries\ to\ remove\ a\ negative\ index\ from\ the\ list.</li>\n\ </ol>\n
comment9.params=
comment9.target=void\ testFind()
comment9.text=\n\ Tests\ the\ {@link\ AnimalArrayList\#find(Animal)}\ method\:\n\ <ol>\n\ \ <li>Tries\ to\ find\ an\ {@code\ Animal}\ that's\ in\ the\ list.</li>\n\ \ <li>Tries\ to\ find\ an\ {@code\ Animal}\ that\ isn't\ in\ the\ list.</li>\n\ \ <li>Tries\ to\ find\ a\ {@code\ null}\ value\ in\ the\ list.</li>\n\ </ol>\n
numComments=14
