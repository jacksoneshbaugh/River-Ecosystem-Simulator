#BlueJ class context
comment0.target=River
comment0.text=\n\ Models\ the\ overall\ river\ ecosystem\n\ in\ the\ simulation.\n\ \n\ @author\ Jackson\ Eshbaugh\n\ @version\ 01/28/2024\n
comment1.params=length
comment1.target=River(int)
comment1.text=\n\ Generates\ a\ random\ river\ ecosystem\ of\n\ specified\ length.\n\ \n\ @param\ length\ The\ length\ of\ the\ river.\n
comment2.params=
comment2.target=void\ fillRiver()
comment2.text=\n\ Randomly\ fills\ the\ river\ with\ fish,\n\ bears,\ and\ empty\ (null)\ spots.\ To\ be\ used\n\ in\ generating\ a\ new\ ecosystem.\n
comment3.params=
comment3.target=int\ getLength()
comment3.text=\n\ Gets\ the\ length\ of\ the\ river.\n\ \n\ @return\ The\ length\ of\ the\ river\n\ being\ modeled.\n
comment4.params=
comment4.target=int\ numEmpty()
comment4.text=\n\ Finds\ the\ number\ of\ empty\ cells\ in\ the\ river.\n\ \n\ @return\ The\ count\ of\ cells\ in\ the\ river\n\ who\ are\ set\ to\ null\n
comment5.params=animal
comment5.target=boolean\ addRandom(Animal)
comment5.text=\n\ Attempts\ to\ add\ a\ new\ animal\ of\ age\ 0\n\ and\ of\ random\ gender,\ who\ is\ the\ same\ type\ as\n\ the\ specified\ animal\ to\ a\ random\ empty\ cell.\n\ \n\ Helper\ method\ for\ {@link\ \#processMove(int,\ int)}\ to\ fulfil\n\ rule\ 4\ in\ section\ 1.1\ of\ the\ project\ specification.\n\ \n\ @return\ True\ if\ the\ operation\ is\ successful,\ or\ false\ if\n\ there\ aren't\ any\ empty\ cells.\n
comment6.params=i
comment6.target=void\ updateCell(int)
comment6.text=\n\ Updates\ one\ specific\ cell\ of\ the\ river.\ \n\ If\ the\ cell\ {@code\ river[i]}\ is\ null,\ no\ action\ is\ taken.\n\ Otherwise\:\n\ <ol>\n\ \ \ <li>Checks\ if\ the\ animal\ should\ be\ updated\ (i.e.,\ if\ the\ animal\ already\ moved\ this\ cycle).\ If\ not,\ no\ further\ action\ is\ taken.</li>\n\ \ \ <li>Checks\ the\ animal's\ age.\ If\ it's\ at\ the\ end\ of\ its\ lifespan,\ it\ dies.</li>\n\ \ \ <li>If\ the\ animal\ is\ still\ alive,\ decides\ if\ the\ animal\ will\ move\u2014and\ if\ so,\ in\ which\ direction.</li>\n\ \ \ <li>Calls\ {@link\ \#processMove(int,\ int)}\ to\ process\ the\ move\ taken\ by\ the\ animal\ and\ any\ consequeces\ of\ it.</li>\n\ </ol>\n\ \n\ @param\ i\ The\ index\ of\ the\ cell\ in\ the\ {@code\ river}\ array\ to\ be\ updated.\n
comment7.params=i\ targetIndex
comment7.target=void\ processMove(int,\ int)
comment7.text=\n\ Helper\ method\ for\ {@link\ \#updateCell(int)}.\n\ Moves\ the\ Animal\ in\ question,\ processing\ any\n\ consequences\ of\ these\ moves\ as\ well.\n\ \n\ @param\ i\ The\ index\ of\ the\ animal\ to\ move\ (the\ same\ parameter\ as\ in\ {@link\ \#updateCell(int)}).\n\ @param\ targetIndex\ The\ index\ where\ the\ animal\ wants\ to\ move\ (an\ index\ one\ away\ from\ i,\ \n\ unless\ i\ is\ at\ the\ extrema\ of\ the\ array).\n
comment8.params=
comment8.target=void\ updateRiver()
comment8.text=\n\ Performs\ one\ cycle\ of\ the\ simulation\n\ by\ calling\ {@link\ \#updateCell(int)}\n\ on\ every\ cell\ in\ the\ {@code\ river}\ array.\n
comment9.params=
comment9.target=java.lang.String\ toString()
comment9.text=\n\ Produces\ a\ string\ representation\n\ of\ the\ river,\ using\ "---"\ to\ represent\n\ empty\ cells\ and\ {@link\ Animal\#toString()}\ for\n\ animals.\n\ \n\ @return\ The\ string\ representation\ of\ the\ river.\n
numComments=10
