#BlueJ class context
comment0.target=AnimalArrayList
comment0.text=\n\ Implementation\ of\ {@link\ AnimalList}\ that\ uses\ an\ array-based\n\ approach.\ An\ array\ is\ grown\ with\ the\ list\ as\ the\ list\ grows,\ and\ a\n\ seperate\ size\ variable\ allows\ for\ array\ length\ to\ exceed\ list\n\ length.\n\ \n\ @author\ Jackson\ Eshbaugh\n\ @version\ 02/10/2024\n
comment1.params=capacity
comment1.target=AnimalArrayList(int)
comment1.text=\n\ Creates\ a\ new\ {@code\ AnimalArrayList}\ with\n\ a\ {@code\ capacity}\ unit\ long\ array\ to\ start.\n\ \n\ @param\ capacity\ the\ starting\ capacity\ of\ the\ {@link\ Animal}\ array\n
comment10.params=animal
comment10.target=int\ find(Animal)
comment11.params=animal
comment11.target=void\ remove(Animal)
comment2.params=
comment2.target=AnimalArrayList()
comment2.text=\n\ Creates\ a\ new\ {@code\ AnimalArrayList}\ with\n\ a\ {@code\ 10}\ unit\ long\ array\ to\ start.\n
comment3.params=
comment3.target=int\ empty()
comment3.text=\n\ Gets\ the\ number\ of\ empty\ slots\ in\ the\ array.\n\ \n\ @return\ the\ number\ of\ empty\ slots\ in\ the\ array\n
comment4.params=newSize
comment4.target=void\ resize(int)
comment4.text=\n\ Resizes\ the\ array\ to\ a\ newer\ (practically,\ larger)\ size,\ and\n\ copies\ all\ the\ data\ into\ the\ new\ array.\n\ \n\ @param\ newSize\ the\ new\ size\ of\ the\ array\n
comment5.params=
comment5.target=int\ size()
comment6.params=animal
comment6.target=void\ add(Animal)
comment7.params=index
comment7.target=Animal\ remove(int)
comment8.params=index
comment8.target=Animal\ get(int)
comment9.params=
comment9.target=void\ clear()
numComments=12
